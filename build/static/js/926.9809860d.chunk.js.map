{"version":3,"file":"static/js/926.9809860d.chunk.js","mappings":"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","sources":["components/basket/MakePayment.js","pages/basket.js","utils/axios.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalOverlay,\r\n    ModalContent,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Flex,\r\n    Text\r\n} from \"@chakra-ui/react\";\r\nimport { CardElement, useElements, useStripe } from '@stripe/react-stripe-js';\r\nimport axios from '../../utils/axios';\r\n\r\nfunction MakePayment({ isOpen, onClose, userId, basket, price, cb }) {\r\n    const elements = useElements();\r\n    const stripe = useStripe();\r\n    const [rate, setRate] = useState(null);\r\n\r\n\r\n    async function getRate() {\r\n        fetch('https://cdn.jsdelivr.net/gh/fawazahmed0/currency-api@1/latest/currencies/uah.json')\r\n            .then((res) => res.json())\r\n            .then((res) => setRate(res.uah.usd))\r\n    }\r\n\r\n    async function submit() {\r\n        if (!stripe || !elements) {\r\n            return;\r\n        }\r\n\r\n        const payload = await stripe.createPaymentMethod({\r\n            type: \"card\",\r\n            card: elements.getElement(CardElement)\r\n        })\r\n\r\n        const intentData = await axios.post(\"/stripe\", {\r\n            price: Math.round(price * rate * 100) / 100\r\n        })\r\n            .then((response) => {\r\n                return {\r\n                    secret: response.data.client_secret,\r\n                    id: response.data.intent_id,\r\n                };\r\n            },\r\n                (error) => {\r\n                    console.log(error)\r\n                    return error;\r\n                }\r\n            );\r\n\r\n        const result = await stripe.confirmCardPayment(intentData.secret, {\r\n            payment_method: payload.paymentMethod.id,\r\n        });\r\n\r\n        if (result.error) {\r\n            console.log(result.error);\r\n            return\r\n        }\r\n\r\n        if (result.paymentIntent.status === \"succeeded\") {\r\n            const confirmedPayment = await axios\r\n                .post(\"/confirm-payment\", {\r\n                    payment_id: intentData.id,\r\n                    payment_type: \"stripe\",\r\n                })\r\n                .then(\r\n                    (response) => {\r\n                        return response.data.success;\r\n                    },\r\n                    (error) => {\r\n                        console.log(error);\r\n                        return error;\r\n                    }\r\n                );\r\n\r\n            cb();\r\n            onClose();\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getRate()\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                isOpen={isOpen}\r\n                onClose={onClose}\r\n            >\r\n                <ModalOverlay />\r\n                <ModalContent>\r\n                    <ModalHeader>\r\n                        <Text w=\"100%\" textAlign=\"center\" fontSize=\"30px\">\r\n                            Оплата\r\n                        </Text>\r\n                    </ModalHeader>\r\n\r\n                    <ModalBody>\r\n                        <CardElement style={{ fontSize: '30px' }} />\r\n                    </ModalBody>\r\n\r\n                    <ModalFooter display=\"flex\" justifyContent=\"space-between\">\r\n                        <Text fontSize=\"25px\">{Math.round(price * rate * 100) / 100}$</Text>\r\n                        <Flex alignItems=\"center\">\r\n                            <Button colorScheme='blue' mr={3} onClick={submit}>\r\n                                Підтвердити\r\n                            </Button>\r\n                            <Button onClick={onClose}>Скасувати</Button>\r\n                        </Flex>\r\n                    </ModalFooter>\r\n                </ModalContent>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\nexport default MakePayment","import React, { useState, useEffect, useContext } from 'react'\r\nimport { Context } from \"../index\";\r\nimport { Box, Container, VStack, Flex, Text, Image, Spinner, Button, NumberDecrementStepper, NumberIncrementStepper, NumberInputStepper, NumberInputField, NumberInput, useDisclosure } from '@chakra-ui/react'\r\nimport { DeleteIcon } from \"@chakra-ui/icons\";\r\nimport { observer } from \"mobx-react-lite\"\r\nimport axios from '../utils/axios';\r\nimport MakePayment from \"../components/basket/MakePayment\"\r\n\r\n\r\nconst Basket = observer(() => {\r\n    const { user } = useContext(Context);\r\n    const [basket, setBasket] = useState([]);\r\n    const [totalPrice, setTotalPrice] = useState(0);\r\n    const { isOpen: isOpen, onOpen: onOpen, onClose: onClose } = useDisclosure()\r\n\r\n    async function getBasket() {\r\n        const response = await axios.get('basket/get');\r\n\r\n        if (response.status === 200) {\r\n            setBasket(response.data)\r\n            const total = response.data.reduce((total, item) => total + (item.priceWithDiscount ?? item.price) * item.count, 0);\r\n            setTotalPrice(total);\r\n        }\r\n    }\r\n\r\n    async function deleteGood({ id, itemPrice }) {\r\n        const response = await axios.delete(`basket/${id}`);\r\n        if (response.status === 200) {\r\n            setBasket(basket.filter(item => item.id !== id));\r\n            setTotalPrice(totalPrice - itemPrice)\r\n        }\r\n    }\r\n\r\n    function recalculate() {\r\n        const total = basket.reduce((total, item) => total + (item.priceWithDiscount ?? item.price) * item.count, 0);\r\n        setTotalPrice(total);\r\n    }\r\n\r\n    async function createOrder() {\r\n        const response = await axios.post('user/createOrder', { userId: user.user.id, basket, price: totalPrice });\r\n\r\n        if (response.status === 200) {\r\n            setBasket([])\r\n            setTotalPrice(0)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getBasket()\r\n    }, []);\r\n\r\n    return (\r\n        <Container maxWidth={1080} paddingBottom=\"200px\">\r\n            {basket.length ?\r\n                <VStack>\r\n                    {basket.map((item, i) => {\r\n                        return (\r\n                            <Flex key={i} w=\"100%\" h=\"150px\" rounded={10} bg=\"gray.100\" m={4} p=\"15px 20px 15px 20px\" justifyContent=\"space-between\">\r\n                                <Flex>\r\n                                    <Image h=\"100%\" w=\"auto\" rounded={5} src={item.image} />\r\n                                    <Flex mx={4} my={1} flexDirection=\"column\" justifyContent=\"space-between\">\r\n                                        <Text fontSize=\"30px\" color=\"gray.800\" lineHeight=\"30px\">{item.name}</Text>\r\n                                        <NumberInput defaultValue={item.count} min={1} w=\"100px\" bg=\"gray.100\" rounded={2} onChange={(value) => { item.count = value; recalculate() }}>\r\n                                            <NumberInputField />\r\n                                            <NumberInputStepper>\r\n                                                <NumberIncrementStepper />\r\n                                                <NumberDecrementStepper />\r\n                                            </NumberInputStepper>\r\n                                        </NumberInput>\r\n                                    </Flex>\r\n                                </Flex>\r\n                                <Flex flexDir=\"column\" justifyContent=\"space-between\" alignItems=\"flex-end\">\r\n                                    <Button w=\"40px\" h=\"40px\" colorScheme=\"red\" onClick={() => deleteGood({ id: item.id, itemPrice: (item.priceWithDiscount ?? item.price) * item.count })}>\r\n                                        <DeleteIcon>\r\n\r\n                                        </DeleteIcon>\r\n                                    </Button>\r\n                                    <Text mx={4} fontSize=\"30px\" m=\"0\" color=\"gray.600\">{item.priceWithDiscount ?? item.price}₴</Text>\r\n                                </Flex>\r\n                            </Flex>\r\n                        )\r\n                    }\r\n                    )}\r\n                    <Flex alignItems=\"center\" alignSelf=\"end\" borderWidth=\"2px\" borderColor=\"green.300\" rounded={5} bg=\"green.100\" p=\"20px\">\r\n                        <Text fontSize=\"30px\" marginRight=\"30px\" color=\"gray.600\">{totalPrice}₴</Text>\r\n                        <Button colorScheme=\"green\" onClick={onOpen}>Купити</Button>\r\n                    </Flex>\r\n                </VStack>\r\n                :\r\n                <Box position=\"absolute\" top=\"calc(50% - 84px)\" left=\"calc(50% - 30px)\">\r\n                    <Text fontSize=\"40px\">\r\n                        Пусто\r\n                    </Text>\r\n                </Box>\r\n            }\r\n\r\n\r\n            <MakePayment\r\n                isOpen={isOpen}\r\n                onClose={onClose}\r\n                userId={user.user.id}\r\n                basket={basket}\r\n                price={totalPrice}\r\n                cb={createOrder}\r\n            />\r\n        </Container >\r\n\r\n\r\n    )\r\n})\r\n\r\nexport default Basket; ","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://mydiplomlevas.herokuapp.com/api/\",\r\n  headers: {\r\n    'Authorization': localStorage.getItem(\"Token\") ?? \"\"\r\n  }\r\n});\r\n\r\ninstance.interceptors.response.use(\r\n  res => res,\r\n  error => {\r\n    if (error.response.status === 401) {\r\n      localStorage.removeItem(\"Token\");\r\n    };\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default instance;"],"names":["isOpen","onClose","price","userId","basket","cb","elements","useElements","stripe","useStripe","useState","rate","setRate","fetch","then","res","json","uah","usd","createPaymentMethod","type","card","getElement","CardElement","payload","axios","Math","round","response","secret","data","client_secret","id","intent_id","error","console","log","intentData","confirmCardPayment","payment_method","paymentMethod","result","paymentIntent","status","payment_id","payment_type","success","useEffect","getRate","w","textAlign","fontSize","style","display","justifyContent","alignItems","colorScheme","mr","onClick","Basket","observer","user","useContext","Context","setBasket","totalPrice","setTotalPrice","useDisclosure","onOpen","total","reduce","item","priceWithDiscount","count","itemPrice","filter","getBasket","maxWidth","paddingBottom","length","map","i","h","rounded","bg","m","p","src","image","mx","my","flexDirection","color","lineHeight","name","defaultValue","min","onChange","value","recalculate","flexDir","deleteGood","alignSelf","borderWidth","borderColor","marginRight","position","top","left","instance","baseURL","headers","localStorage","getItem","interceptors","use","removeItem","Promise","reject"],"sourceRoot":""}